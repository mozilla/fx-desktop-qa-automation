import pytest
from selenium.webdriver import Firefox
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait

from modules.browser_object_tabbar import TabBar


@pytest.fixture()
def test_case():
    return "1901393"


PHISHING_URL = "http://www.itisatrap.org/firefox/its-a-trap.html"
MALWARE_URL = "http://www.itisatrap.org/firefox/its-an-attack.html"


@pytest.fixture()
def add_prefs():
    return [
        ("browser.safebrowsing.malware.enabled", True),
        ("browser.safebrowsing.phishing.enabled", True),
    ]


def get_error_title(driver, url):
    """
    Navigate to the given URL and return the error title text.
    """
    driver.get(url)
    error_title_element = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.ID, "errorTitleText"))
    )
    return error_title_element.get_attribute("innerText")


def test_phishing_and_malware_warning_errors(driver: Firefox):
    """
    C1901393: - This tests that when a user accesses websites suspected of phishing or malware, a warning page is
    displayed.
    """
    # Create the object
    tabs = TabBar(driver)

    # Test phishing warning page
    phishing_error_title = get_error_title(driver, PHISHING_URL)
    assert phishing_error_title == "Deceptive site ahead", (
        f"Expected error title 'Deceptive site ahead' not found at {PHISHING_URL}. "
        f"Actual: {phishing_error_title}"
    )

    # Open a new tab
    tabs.new_tab_by_button()
    tabs.wait_for_num_tabs(2)
    driver.switch_to.window(driver.window_handles[1])

    # Test malware warning page
    malware_error_title = get_error_title(driver, MALWARE_URL)
    assert malware_error_title == "Visiting this website may harm your computer", (
        f"Expected error title 'Visiting this website may harm your computer' not found at {MALWARE_URL}. "
        f"Actual: {malware_error_title}"
    )
